MODULES['sistema_casa'] = (root, ctx) =&gt; { // Personalizaci√≥n del nombre root.querySelectorAll('.child-name').forEach(el =&gt; { const fallback = el.getAttribute('data-fallback') || 'Su hijo';
    const name = (ctx.childName || '').trim(); el.textContent = nombre &amp;&amp; !nombre.startsWith('[') ? nombre : fallback; }); // Nota de √©nfasis pastoral const nota = root.querySelector('.house-personality-note');
  if (note) {
    if (ctx?.priorities?.pastoral === 3) {
      note.textContent = `Me alegro de que valore tanto la atenci√≥n pastoral: el bienestar de ${ctx.childName || 'your child'} ser√° siempre nuestra prioridad.`;
    } else {
      note.style.display = 'none'; } } // Detecci√≥n simple de g√©nero y embarque para que coincida con el formulario de consulta const getGender = () =&gt; { const raw = (ctx.gender || '').toString().toLowerCase().trim(); if (raw === 'female') return 'hembra';
    if (raw === 'masculino') return 'masculino';
    return ''; }; const getBoarding = () =&gt; { const raw = (ctx.boardingPreference || '').toString().toLowerCase().trim(); if (raw.includes('day')) return 'd√≠a'; if (raw.includes('boarding')) return 'embarque';
    return ''; }; const gender = getGender(); const pref = getBoarding(); console.log('House filtering - Gender:', g√©nero, 'Internado:', pref);

  // Filter houses by gender and boarding preference
  root.querySelectorAll('.house-card').forEach(card => {
    const cardGender = (card.dataset.gender || '').toLowerCase(); const cardType = (card.dataset.type || '').toLowerCase(); let show = true; if (gender &amp;&amp; cardGender &amp;&amp; gender !== cardGender) { show = false; } if (pref === 'day' &amp;&amp; cardType === 'boarding') { show = false; } else if (pref === 'boarding' &amp;&amp; cardType === 'day') { show = false; } card.style.display = show ? 'block' : 'none'; }); // Carga perezosa de im√°genes if (typeof hydrateLazyAssets === 'function') { hydrateLazyAssets(root); } // ===== NUEVA GESTI√ìN DE V√çDEOS PARA ARCHIVOS MP4 - OPTIMIZADA PARA M√ìVILES ===== // Utilidad: Prime video for mobile autoplay (critical for iOS/Safari) const primeVideo = (video) =&gt; { if (!video) return; video.muted = true; video.playsInline = true; // JS property video.setAttribute('playsinline'''); // Atributo iOS video.setAttribute('autoplay'''); video.setAttribute('loop'''); video.setAttribute('preload', 'metadata'); // Only load metadata until play
  };

  // LAZY LOAD: Set video source from data-src (only called on expand)
  const loadVideoSource = (video) => {
    if (!video) return;
    
    const dataSrc = video.getAttribute('data-src'); if (!dataSrc || video.src) return; video.src = dataSrc; video.load(); console.log('Lazy loaded video:', dataSrc); }; // Reproduce el v√≠deo cuando la tarjeta se expande const playVideo = (video) =&gt; { if (!video) return; primeVideo(video); // Prime for mobile loadVideoSource(video); // Lazy load source // Peque√±o retardo para asegurar que la fuente se carga setTimeout(() =&gt; { video.play().catch(err =&gt; { console.log('House video autoplay blocked:', err); }); }, 100); }; // Detener el v√≠deo cuando la tarjeta se colapsa const stopVideo = (video) =&gt; { if (!video) return; video.pause(); video.currentTime = 0; video.muted = true; }; // Expandir/colapsar la funcionalidad con EVENT DELEGATION root.addEventListener('click', (e) =&gt; { // Manejar botones de expansi√≥n if (e.target.classList.contains('expand-button')) { e.preventDefault(); e.stopPropagation(); const card = e.target.closest('.house-card'); if (!card) return; const details = card.querySelector('.house-details'); if (!detalles) return; const isExpanded = card.classList.contains('expanded'); // Cerrar todas las dem√°s tarjetas expandidas root.querySelectorAll('.house-card.expanded').forEach(otherCard =&gt; { if (otherCard !== card) { otherCard.classList.remove('expanded'); const otherDetails = otherCard.querySelector('.house-details'); const otherVideo = otherCard.querySelector('.house-video'); if (otrosDetalles) { otrosDetalles.style.display = 'none'; otherDetails.setAttribute('hidden'''); } if (otherVideo) stopVideo(otherVideo); } }); if (!isExpanded) { // Expandir esta tarjeta card.classList.add('expanded'); details.style.display = 'block'; details.removeAttribute('hidden'); const video = card.querySelector('.house-video'); if (video) playVideo(video); setTimeout(() =&gt; { card.scrollIntoView({ behavior: 'smooth', bloque: 'center' });
        }, 300);
      } else {
        // Collapse this card
        card.classList.remove('expanded'); details.style.display = 'none'; details.setAttribute('hidden', ''); const video = card.querySelector('.house-video'); if (video) stopVideo(video); } return; } // Manejar botones de silencio - Activar/desactivar audio si (e.target.classList.contains('mute-button')) { e.preventDefault(); e.stopPropagation(); const card = e.target.closest('.house-card'); const video = card?.querySelector('.house-video'); if (!video) return; // Asegurarse de que la fuente de v√≠deo est√° cargada loadVideoSource(video); // Conmutar el estado de silencio if (video.muted) { // Desactivar el silencio video.muted = false; video.volume = 1.0; e.target.innerHTML = 'üîá Click to Mute'; console.log('House video unmuted'); // Si est√° en pausa, reprod√∫celo if (video.paused) { video.play().catch(err =&gt; { console.error('Could not play video:', err); }); } } else { // Mute video.muted = true; e.target.innerHTML = 'üîä Click for Sound'; console.log('House video muted'); } return; } // Manejar botones de cierre if (e.target.classList.contains('close-button')) { e.preventDefault(); e.stopPropagation(); const card = e.target.closest('.house-card'); if (!card) return; card.classList.remove('expanded'); const detalles = card.querySelector('.house-details'); if (detalles) { detalles.style.display = 'none'; details.setAttribute('hidden'''); const video = card.querySelector('.house-video'); if (video) stopVideo(video); } return; } }); // Auto-mute videos when scrolling away const setupAutoMute = () =&gt; { const checkVideoVisibility = () =&gt; { const expandedCards = root.querySelectorAll('.house-card.expanded'); expandedCards.forEach(card =&gt; { const video = card.querySelector('.house-video'); if (!video || !video.src) return; const rect = video.getBoundingClientRect(); const isVisible = rect.top < window.innerHeight && rect.bottom > 0; // Si el v√≠deo no est√° a la vista y no est√° silenciado, sil√©ncielo if (!isVisible &amp;&amp; !video.muted) { video.muted = true; const btn = card.querySelector('.mute-button'); if (btn) btn.innerHTML = 'üîä Click for Sound'; console.log('House video auto-muted - scrolled out of view'); } } }); }; // Controlador de desplazamiento ralentizado let scrollTimeout; const handleScroll = () =&gt; { if (scrollTimeout) return; scrollTimeout = setTimeout() =&gt; { checkVideoVisibility(); scrollTimeout = null; }, 200); }; window.addEventListener('scroll', handleScroll, { passive: true });
  };

  setupAutoMute();
};